{"/bridge":{"title":"Bridge","data":{"currently-supported#Currently Supported":"ESX\tQBCore\tQBox\tvRP\tNDCore\tOXCore\tDatabase\t\t\t\t\t\t\toxmysql\t\t\t\t\t\t\tInventory\t\t\t\t\t\t\tqb-inventory\t\t\tlj-inventory\t\t\taj-inventory\t\t\tax-inventory\t\t\tps-inventory\t\t\tox-inventory\t\t\t\t\t\t\tqs-inventory\t\t\t\tcodem-inventory\t\t\t\tTarget\t\t\t\t\t\t\tox_target\t\t\t\t\t\t\tqb-target\t\t\t\t\t\t\tqtarget\t\t\t\t\t\t\tmeta_target\t\t\t\t\t\t\tZone\t\t\t\t\t\t\t\t\t\t\tox_lib\t\t\t\t\t\t\tPolyZone","bridge-settings-optional#Bridge Settings (Optional)":"The bridge auto detects all components incase you use a renamed database/framework/inventory/target/zone you can change the names using the following convars\n-- Turn On Debug Mode\nsetr bridge:debug \"true\"\n-- Change Language\nsetr bridge:locale \"en\"\n-- Override Database\nsetr bridge:database \"oxmysql\"\n-- Override Database Resource Name (Used For Export)\nsetr bridge:databasename \"oxmysql\"\n-- Override Framework\nsetr bridge:framework \"esx\"\n-- Override Framework Resource Name (Used For Export)\nsetr bridge:frameworkname \"es_extended\"\n-- Override Framework Resource Name (Used For Event)\nsetr bridge:frameworkevent \"esx:getSharedObject\"\n-- Override Framework Prefix\nsetr bridge:frameworkprefix \"esx\"\n-- Override Inventory\nsetr bridge:inventory \"ox_inventory\"\n-- Override Inventory Resource Name (Used For Export)\nsetr bridge:inventoryname \"ox_inventory\"\n-- Override Inventory Image Path\nsetr bridge:inventoryimagepath \"ox_inventory/web/images/\"\n-- Override Target \nsetr bridge:target \"ox_target\"\n-- Override Target Name (Used For Export)\nsetr bridge:targetname \"ox_target\"\n-- Override Zone \nsetr bridge:zone \"ox_lib\"\n-- Override Zone Name (Used For Export)\nsetr bridge:zonename \"ox_lib\""}},"/bridge/core":{"title":"Bridge Core","data":{"resource#Resource":"Current Resource Name\nBridge.Resource","name#Name":"Bridge Resource Name\nBridge.Name","version#Version":"Current Bridge Version\nBridge.Version","context#Context":"Current Context Server Or Client\nBridge.Context","debugmode#DebugMode":"Is Bridge In DebugMode\nBridge.DebugMode","locale#Locale":"Locale Currently Used default en\nBridge.Locale","disabled#Disabled":"Bridge Disabled Modules\nBridge.Disabled","framework#Framework":"Current Framework\nBridge.Framework","frameworkname#FrameworkName":"Current Framework Name Used For Exports\nBridge.FrameworkName","frameworkevent#FrameworkEvent":"Current Framework Event Used For Events\nBridge.FrameworkEvent","inventory#Inventory":"Current Inventory\nBridge.Inventory","inventoryname#InventoryName":"Current Inventory Name Used For Exports\nBridge.InventoryName","inventoryimagepath#InventoryImagePath":"Current Inventory Image Path\nBridge.InventoryImagePath","target#Target":"Current Target\nBridge.Target","targetname#TargetName":"Current Target Name Used For Exports\nBridge.TargetName","zone#Zone":"Current Zone\nBridge.Zone","zonename#ZoneName":"Current Zone Name Used For Exports\nBridge.ZoneName","database#Database":"Current Database\nBridge.Database","databasename#DatabaseName":"Current Database Name Used For Exports\nBridge.DatabaseName"}},"/bridge/database/insert":{"title":"Insert","data":{"":"Insert new row into table\nDatabase.insert(query, data, cb)\nquery: string\ndata?: table\ncb?: function(result)\nreturns: number\nlocal id = Database.insert('INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' })\nprint(id)\nDatabase.insert('INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' }, function(id)\n    print(id)\nend)"}},"/bridge/database/prepare":{"title":"Prepare","data":{"":"Prepare query for optimizing performance and frequently called queries\nDatabase.prepare(query, data, cb)\nquery: string\ndata?: table\ncb?: function(result)\nreturns: table\nlocal result = Database.prepare('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ?', { 'value1' })\nprint(json.encode(result))\nDatabase.prepare('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ?', { 'value1' }, function(result)\n    print(json.encode(result))\nend)"}},"/bridge/database/query":{"title":"Query","data":{"":"Returns all\nDatabase.query(query, data, cb)\nquery: string\ndata?: table\ncb?: function(result)\nreturns: any\nlocal result = Database.query('SELECT * FROM `table` WHERE `column3` = ?', { 'value1' })\nprint(json.encode(result))\nDatabase.query('SELECT * FROM `table` WHERE `column3` = ?', { 'value1' }, function(result)\n    print(json.encode(result))\nend)"}},"/bridge/database/single":{"title":"Single","data":{"":"Returns all selected columns for a single row\nDatabase.single(query, data, cb)\nquery: string\ndata?: table\ncb?: function(result)\nreturns: table\nlocal result = Database.single('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' })\nprint(result.column1, result.column2)\nDatabase.single('SELECT `column1`, `column2` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' }, function(result)\n    print(result.column1, result.column2)\nend)"}},"/bridge/database/scalar":{"title":"Scalar","data":{"":"Returns the first column for a single row\nDatabase.scalar(query, data, cb)\nquery: string\ndata?: table\ncb?: function(result)\nreturns: any\nlocal column1 = Database.scalar('SELECT `column1` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' })\nprint(column1)\nDatabase.scalar('SELECT `column1` FROM `table` WHERE `column3` = ? LIMIT 1' , { 'value1' }, function(columm1)\n    print(column1)\nend)"}},"/bridge/database/transaction":{"title":"Transaction","data":{"":"Transaction executes multiple queries and commits them only if all succeed\nDatabase.transaction(query, data, cb)\nquery: table\ncb?: function(result)\nreturns: boolean\nlocal queries = {\n    { 'INSERT INTO `table` (column1) VALUES (?)', { 'value1' } },\n    { 'INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' } },\n}\nlocal result = Database.transaction(queries)\nprint(result)\nlocal queries = {\n    { 'INSERT INTO `table` (column1) VALUES (?)', { 'value1' } },\n    { 'INSERT INTO `table` (column1, column2) VALUES (?, ?)', { 'value1', 'value2' } },\n}\nDatabase.transaction(queries, function(result)\n    print(result)\nend)"}},"/bridge/database/update":{"title":"Update","data":{"":"Returns the number of rows affected by the query\nDatabase.update(query, data, cb)\nquery: string\ndata?: table\ncb?: function(result)\nreturns: number\nlocal result = Database.update('UPDATE `table` SET `column1` = ? WHERE `column2` = ?' , { 'value1', 'value2' })\nprint(result)\nDatabase.update('UPDATE `table` SET `column1` = ? WHERE `column2` = ?' , { 'value1', 'value2' }, function(result)\n    print(result)\nend)"}},"/bridge/framework/client":{"title":"Framework Client","data":{"onplayerloaded#OnPlayerLoaded":"Function gets called when the player loads into the server\nFramework.OnPlayerLoaded = function()\n    -- Player Loaded Into The Server\nend","onplayerunload#OnPlayerUnload":"Function gets called when the player leaves the server\nFramework.OnPlayerUnload = function()\n    -- Player Left The Server\nend","onjobupdate#OnJobUpdate":"Function gets called when the players job changes\nFramework.OnJobUpdate = function()\n    -- Player Job Changed\nend","onjobdutyupdate#OnJobDutyUpdate":"Function gets called when the players job duty changes\nFramework.OnJobDutyUpdate = function()\n    -- Player Job Duty Changed\nend","ongangupdate#OnGangUpdate":"Function gets called when the players gang changes\nFramework.OnGangUpdate = function()\n    -- Player Gang Changed\nend","player#Player":"Framework.Player\nreturns: Player\nlocal player = Framework.Player\nprint(player.Firstname, player.Lastname)","createcallback#CreateCallback":"Function Creates Client Callback.\nFramework.CreateCallback(name, cb)\nname: string\ncb: function(cb, ...)\nFramework.CreateCallback('clientcallbackname', function(cb, value1, value2)\n    cb(value1, value2)\nend)","triggercallback#TriggerCallback":"Function Triggers Server Callback\nFramework.TriggerCallback(name, cb, ...)\nname: string\ncb: function(...)\nFramework.TriggerCallback('servercallbackname', function(result1, result2)\n    print(result1, result2)\nend, value1, value2)","spawnvehicle#SpawnVehicle":"Function Spawns Vehicle\nFramework.SpawnVehicle(cb, model, coords, warp)\ncb: function(netid)\nmodel number | string\ncoords? vector3 | vector4\nwarp? boolean\nFramework.SpawnVehicle(function(netid)\n    local vehicle = NetToVeh(netid)\n    SetVehicleNumberPlateText(vehicle, 'MYPLATE')\nend, 'dominator')","toggleduty#ToggleDuty":"Toggle Job Duty\nFramework.ToggleDuty()","notify#Notify":"Show Notification Message\nFramework.Notify(message, type, length)\nmessage: string\ntype info | success | error\nlength number\nFramework.Notify('My Notification Message', 'info', 5000)","isplayerdead#IsPlayerDead":"Check If Player Is Dead\nFramework.IsPlayerDead()\nreturns: boolean","getstatus#GetStatus":"Get Player Status\nFramework.GetStatus(key)\nkey: string\nreturns: number\nFramework.GetStatus('hunger')","opensociety#OpenSociety":"Open Society Menu\nFramework.OpenSociety(name, type)\nname: string\ntype: 'job' | 'gang'\nreturns: number\nFramework.OpenSociety('police', 'job')"}},"/bridge/framework/locale":{"title":"Framework Locale","data":{"":"Language files are automatically loaded from the locales folder, the default language is en","change-the-language#Change The Language":"Add the following convar to your server.cfg to change the preferred language\nsetr bridge:locale en","loading-languages#Loading Languages":"Add the following to your fxmanifest to load all locales\nfiles {\n    'bridge/**/**/client.lua',\n    'bridge/**/*.lua',\n    'locales/*.json'\n}","create-locale#Create Locale":"{\n  \"myname\": \"My Name Is {name}\",\n}\nGetting Specific Locale String\nFramework.Locale('myname', {  name = 'Sloppy' })\nReturns\nMy Name Is Sloppy","locale#Locale":"Get Specific Language String\nFramework.Locale(key, params)\nkey: string\nparams: table\nFramework.Locale('mykey', {  myvalue = 'My Value' })\nreturns: string","locales#Locales":"Get Language Table\nFramework.Locales()\nreturns: table"}},"/bridge/framework/player":{"title":"Framework Player","data":{"source#source":"Player sourcereturns: number\nlocal player = Framework.GetPlayer(source)\nprint(player.source)","identifier#Identifier":"Player identifierreturns: string\nFramework.Player.Identifier\nlocal player = Framework.GetPlayer(source)\nplayer.Identifier","name#Name":"Player namereturns: string\nFramework.Player.Name\nlocal player = Framework.GetPlayer(source)\nplayer.Name","firstname#Firstname":"Player firstnamereturns: string\nFramework.Player.Firstname\nlocal player = Framework.GetPlayer(source)\nplayer.Firstname","lastname#Lastname":"Player lastnamereturns: string\nFramework.Player.Lastname\nlocal player = Framework.GetPlayer(source)\nplayer.Lastname","date-of-birth#Date Of Birth":"Player Date Of Birthreturns: string\nFramework.Player.DateOfBirth\nlocal player = Framework.GetPlayer(source)\nplayer.DateOfBirth","gender#Gender":"Player Genderreturns: string\nFramework.Player.Gender\nlocal player = Framework.GetPlayer(source)\nplayer.Gender","job#Job":"Player jobreturns: table\nName: string\nLabel: string\nDuty: boolean\nBoss: boolean\nGrade: table\nName: string\nLevel: number\nFramework.Player.Job\n-- returns: {\"Boss\":false,\"Duty\":false,\"Grade\":{\"Level\":1,\"Name\":\"Officer\"},\"Label\":\"Law Enforcement\",\"Name\":\"police\"}\nFramework.Player.Job.Name\n-- returns: police \nFramework.Player.Job.Label\n-- returns: Law Enforcement \nFramework.Player.Job.Duty\n-- returns: false \nFramework.Player.Job.Boss\n-- returns: false \nFramework.Player.Job.Grade\n-- returns: {\"Level\":1,\"Name\":\"Officer\"}\nFramework.Player.Job.Grade.Name\n-- returns: Officer\nFramework.Player.Job.Grade.Level\n-- returns: 1\nlocal player = Framework.GetPlayer(source)\nplayer.Job\n-- returns: {\"Boss\":false,\"Duty\":false,\"Grade\":{\"Level\":1,\"Name\":\"Officer\"},\"Label\":\"Law Enforcement\",\"Name\":\"police\"}\nplayer.Job.Name\n-- returns: police \nplayer.Job.Label\n-- returns: Law Enforcement \nplayer.Job.Duty\n-- returns: false \nplayer.Job.Boss\n-- returns: false \nplayer.Job.Grade\n-- returns: {\"Level\":1,\"Name\":\"Officer\"}\nplayer.Job.Grade.Name\n-- returns: Officer\nplayer.Job.Grade.Level\n-- returns: 1","gang#Gang":"Player gangreturns: table\nName: string\nLabel: string\nBoss: boolean\nGrade: table\nName: string\nLevel: number\nFramework.Player.Gang\n-- returns: {\"Boss\":false,\"Grade\":{\"Level\":1,\"Name\":\"Enforcer\"},\"Label\":\"My Gang Name\",\"Name\":\"mygang\"}\nFramework.Player.Gang.Name\n-- returns: mygang \nFramework.Player.Gang.Label\n-- returns: My Gang Name\nFramework.Player.Gang.Boss\n-- returns: false \nFramework.Player.Gang.Grade\n-- returns: {\"Level\":1,\"Name\":\"Enforcer\"}\nFramework.Player.Gang.Grade.Name\n-- returns: Enforcer\nFramework.Player.Gang.Grade.Level\n-- returns: 1\nlocal player = Framework.GetPlayer(source)\nplayer.Gang\n-- returns: {\"Boss\":false,\"Grade\":{\"Level\":1,\"Name\":\"Enforcer\"},\"Label\":\"My Gang Name\",\"Name\":\"mygang\"}\nplayer.Gang.Name\n-- returns: mygang \nplayer.Gang.Label\n-- returns: My Gang Name\nplayer.Gang.Boss\n-- returns: false \nplayer.Gang.Grade\n-- returns: {\"Level\":1,\"Name\":\"Enforcer\"}\nplayer.Gang.Grade.Name\n-- returns: Enforcer\nplayer.Gang.Grade.Level\n-- returns: 1","metadata#Metadata":"Player Metadatareturns: table\nFramework.Player.Metadata\nlocal player = Framework.GetPlayer(source)\nplayer.Metadata","setjob#SetJob":"Set Player job\nPlayer.SetJob(job, grade)\njob: string\ngrade number | string\nreturns: boolean\nlocal player = Framework.GetPlayer(source)\nplayer.SetJob('police', 0)","setgang#SetGang":"Set Player gang\nPlayer.SetGang(gang, grade)\ngang: string\ngrade number | string\nreturns: boolean\nlocal player = Framework.GetPlayer(source)\nplayer.SetGang('mygang', 0)","hasjob#HasJob":"Check if player has job and or grade\nFramework.HasJob(job, player)\njob: string | table\nplayer: Player\nreturns: boolean\nFramework.HasJob('police', Framework.Player)\nFramework.HasJob({ ['police'] = 1 }, Framework.Player)","hasgang#HasGang":"Check if player has gang and or grade\nFramework.HasGang(gang, player)\ngang: string | table\nplayer: Player\nreturns: boolean\nFramework.HasGang('mygang', Framework.Player)\nFramework.HasGang({ ['mygang'] = 1 }, Framework.Player)","addmoney#AddMoney":"Add Player Money\nPlayer.AddMoney(type, amount)\ntype: cash | bank | other\namount number\nreturns: boolean\nlocal player = Framework.GetPlayer(source)\nplayer.AddMoney('cash', 100)","removemoney#RemoveMoney":"Remove Player Money\nPlayer.RemoveMoney(type, amount)\ntype: cash | bank | other\namount number\nreturns: boolean\nlocal player = Framework.GetPlayer(source)\nplayer.RemoveMoney('cash', 100)","getmoney#GetMoney":"Get Player Money\nPlayer.GetMoney(type)\ntype: cash | bank | other\nreturns: number\nlocal player = Framework.GetPlayer(source)\nplayer.GetMoney('cash')","accounts#Accounts":"Gets Player Account Balance\nPlayer.Accounts[name]\nname: string\nreturns: number\n-- Cash\nFramework.Player.Accounts['cash']\n-- Bank\nFramework.Player.Accounts['bank']\n-- Other\nFramework.Player.Accounts['crypto']","getstatus#GetStatus":"Get Player Status\nPlayer.GetStatus(key)\nkey: string\nreturns: number\nlocal player = Framework.GetPlayer(source)\nplayer.GetStatus('hunger')","setstatus#SetStatus":"Set Player Status\nPlayer.SetStatus(key, value)\nkey: string\nvalue: number\nlocal player = Framework.GetPlayer(source)\nplayer.SetStatus('hunger', 100)","getmetadata#GetMetaData":"Get Player Metadata\nPlayer.GetMetaData(key)\nkey?: string\nlocal player = Framework.GetPlayer(source)\n-- Get All Metadata\nplayer.GetMetaData()\n-- Get Specific Metadata key\nplayer.GetMetaData('mykey')","setmetadata#SetMetaData":"Set Player Metadata\nPlayer.SetMetaData(key, value)\nkey: string\nvalue: any\nlocal player = Framework.GetPlayer(source)\nplayer.SetMetaData('mykey', 'myvalue')","haslicense#HasLicense":"Check If Player Has License\nPlayer.HasLicense(name)\nname: string\nreturns: boolean\nlocal player = Framework.GetPlayer(source)\nplayer.HasLicense('driver')","getlicenses#GetLicenses":"Get Player Licenses\nPlayer.GetLicenses()\nreturns: table<string, boolean>\nlocal player = Framework.GetPlayer(source)\nplayer.GetLicenses()","addlicense#AddLicense":"Add License To Player\nPlayer.AddLicense(name)\nname: string\nlocal player = Framework.GetPlayer(source)\nplayer.AddLicense('driver')","removelicense#RemoveLicense":"Remove License From Player\nPlayer.RemoveLicense(name)\nname: string\nlocal player = Framework.GetPlayer(source)\nplayer.RemoveLicense('driver')"}},"/bridge/framework/server":{"title":"Framework Server","data":{"onplayerloaded#OnPlayerLoaded":"Function gets called when the player loads into the server\nFramework.OnPlayerLoaded = function(source)\n    -- Player Loaded Into The Server\nend\nsource: number","onplayerunload#OnPlayerUnload":"Function gets called when the player leaves the server\nFramework.OnPlayerUnload = function(source)\n    -- Player Left The Server\nend\nsource: number","onjobupdate#OnJobUpdate":"Function gets called when the players job changes\nFramework.OnJobUpdate = function(source)\n    -- Player Job Changed\nend\nsource: number","onjobdutyupdate#OnJobDutyUpdate":"Function gets called when the players job duty changes\nFramework.OnJobDutyUpdate = function(source)\n    -- Player Job Duty Changed\nend\nsource: number","ongangupdate#OnGangUpdate":"Function gets called when the players gang changes\nFramework.OnGangUpdate = function(source)\n    -- Player Gang Changed\nend\nsource: number","createcallback#CreateCallback":"Function Creates Server Callback.\nFramework.CreateCallback(name, cb)\nname: string\ncb: function(source cb, ...)\nFramework.CreateCallback('servercallbackname', function(source, cb, value1, value2)\n    cb(value1, value2)\nend)","triggercallback#TriggerCallback":"Function Triggers Client Callback\nFramework.TriggerCallback(source, name, cb, ...)\nsource: number\nname: string\ncb: function(...)\nFramework.TriggerCallback(source, 'clientcallbackname', function(result1, result2)\n    print(result1, result2)\nend, value1, value2)","createuseableitem#CreateUseableItem":"Framework.CreateUseableItem(name, cb)\nname: string\ncb: function(source, item, data)\nsource: number\nitem: string\ndata: table\nweight: number\ncount: number\nslot: number\nname: string\nmetadata: table\nlabel: string\nFramework.CreateUseableItem('itemname', function(source, item, data)\n    -- Item Is Useable\nend)","getplayer#GetPlayer":"Framework.GetPlayer(source)\nsource: number\nreturns: Player | nil","getplayerbyidentifier#GetPlayerByIdentifier":"Framework.GetPlayerByIdentifier(identifier)\nidentifier: string\nreturns: Player | nil\nFramework.GetPlayer(source)","doesjobexist#DoesJobExist":"Framework.DoesJobExist(job, grade)\njob: string\ngrade: string | number\nreturns: boolean\nFramework.DoesJobExist('jobname', 0)","doesgangexist#DoesGangExist":"Framework.DoesGangExist(gang, grade)\ngang: string\ngrade: string | number\nreturns: boolean\nFramework.DoesGangExist('gangname', 0)","registersociety#RegisterSociety":"Framework.RegisterSociety(name, type)\nname: string\ntype: 'job' | 'gang'\nFramework.RegisterSociety('police', 'job')","societygetmoney#SocietyGetMoney":"Framework.SocietyGetMoney(name, type)\nname: string\ntype: 'job' | 'gang'\nreturns: number\nFramework.SocietyGetMoney('police', 'job')","societyaddmoney#SocietyAddMoney":"Framework.SocietyAddMoney(name, type, amount)\nname: string\ntype: 'job' | 'gang'\namount: number\nreturns: boolean\nFramework.SocietyAddMoney('police', 'job', 100)","societyremovemoney#SocietyRemoveMoney":"Framework.SocietyRemoveMoney(name, type, amount)\nname: string\ntype: 'job' | 'gang'\namount: number\nreturns: boolean\nFramework.SocietyRemoveMoney('police', 'job', 100)","notify#Notify":"Show Notification Message\nFramework.Notify(source, message, type, length)\nsource number\nmessage: string\ntype info | success | error\nlength number\nFramework.Notify(source, 'My Notification Message', 'info', 5000)","isplayerdead#IsPlayerDead":"Check If Player Is Dead\nFramework.IsPlayerDead(source)\nsource number\nreturns: boolean"}},"/bridge/installation":{"title":"Installation","data":{"":"For Developers Only","installing-types#Installing Types":"To be able to use the bridge types copy the .vscode into the root of your resource\nYou need the vscode extension Lua Language Server coded by Lua published by sumneko","using-the-bridge#Using The Bridge":"To be able to load the bridge you need to add the following to your fxmanifest.lua\nChange The Name Of The Bridge To Whatever You Named Your Bridge\nlua54 'yes'\nuse_experimental_fxv2_oal 'yes'\nbridge 'reFlow-Bridge'\n-- If you want to disable a single module (Not Required)\nbridge_disable 'target'\n-- If you want to disable a multiple modules (Not Required)\nbridge_disable { 'target', 'zone' }\nshared_scripts {\n    '@reFlow-Bridge/bridge.lua',\n}\n-- If You Are Using Language Files Included The Following\nfiles {\n    'locales/*.json', \n}","module-names#Module Names":"database  Disables Database Module\nframework Disables Framework Module\ninventory Disables Inventory Module\ntarget Disables Target Module\nzone Disables Zone Module\nlocale Disables Locale Module"}},"/bridge/inventory/client":{"title":"Inventory Client","data":{"items#Items":"Framework.Items\nreturns: Item[]","openstash#OpenStash":"Opens stash registered using RegisterStash\nFramework.OpenStash(name)\nname: string\nFramework.OpenStash('mystash')","openshop#OpenShop":"Open named shop registered using RegisterShop\nFramework.OpenShop(name)\nname: string\nFramework.OpenShop('myshop')","getitem#GetItem":"Get Item From Player Inventory\nFramework.GetItem(inventory, item, metadata, strict)\ninventory: number | string\nitem: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata or partial matching\nreturns: Item[]\n-- Get Item From Player Inventory\nFramework.GetItem(source, 'water_bottle')\n-- Get Item From Stash\nFramework.GetItem('mystash', 'water_bottle')","hasitem#HasItem":"Check if a player has an item or items\nFramework.HasItem(items, count, metadata, strict)\nitems: string | string[] | table<string, number>\ncount?: number\nmetadata?: table\nstrict?: boolean\nStrictly match metadata or partial matching\nreturns: booleanChecking a single item\nFramework.HasItem('water_bottle', 1)\nChecking a single item with metadata\nFramework.HasItem('water_bottle', 1, { quality = 100 })\nChecking multiple items\nFramework.HasItem({'water_bottle', 'burger' }, 1)\nChecking multiple items with different quantity\nFramework.HasItem({['water_bottle'] = 1, ['burger'] = 2})","lockinventory#LockInventory":"Locks Inventory\nFramework.LockInventory()","unlockinventory#UnlockInventory":"Unlocks Inventory\nFramework.UnlockInventory()"}},"/bridge/inventory/item":{"title":"Inventory Item","data":{"":"name string\nlabel string\nweight number\nslot number\ncount number\ntype string\nmetadata table\nimage string\ndescription string\nstack boolean\nclose boolean"}},"/bridge/inventory/server":{"title":"Inventory Server","data":{"items#Items":"Framework.Items\nreturns: Item[]","additem#AddItem":"Add Item To Inventory\nFramework.AddItem(inventory, item, count, metadata, slot)\ninventory: number | string\nitem: string\ncount: number\nmetadata?: table\nslot?: number\nreturns: booleanAdd item to inventory\n-- To Player\nFramework.AddItem(source, 'water_bottle', 1, { quality = 100 })\n-- To Stash\nFramework.AddItem('mystash', 'water_bottle', 1, { quality = 100 })","removeitem#RemoveItem":"Remove Item From Inventory\nFramework.RemoveItem(inventory, item, count, metadata, slot)\ninventory: number | string\nitem: string\ncount: number\nmetadata?: table\nslot?: number\nreturns: booleanRemove item from inventory\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1)\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1)\nRemove item from inventory where metadata matches\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1, { quality = 50 })\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1, { quality = 50 })\nRemove item from inventory from specific slot\n-- From Player\nFramework.RemoveItem(source, 'water_bottle', 1, nil, 1)\n-- From Stash\nFramework.RemoveItem('mystash', 'water_bottle', 1, nil, 1)","getitem#GetItem":"Get Item From Inventory\nFramework.GetItem(inventory, item, metadata, strict)\ninventory: number | string\nitem: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata or partial matching\nreturns: Item[]\n-- Get Item From Player Inventory\nFramework.GetItem(source, 'water_bottle')\n-- Get Item From Stash\nFramework.GetItem('mystash', 'water_bottle')","getitemcount#GetItemCount":"Get Item Count From Inventory\nFramework.GetItemCount(inventory, item, metadata, strict)\ninventory: number | string\nitem: string\nmetadata?: table\nstrict?: boolean\nStrictly match metadata or partial matching\nreturns: number\n-- Get Item Count From Player Inventory\nFramework.GetItemCount(source, 'water_bottle')\n-- Get Item Count From Stash\nFramework.GetItemCount('mystash', 'water_bottle')","hasitem#HasItem":"Check if a player or a stash has an item\nFramework.HasItem(inventory, items, count, metadata, strict)\ninventory: number | string\nitems: string | string[] | table<string, number>\ncount?: number\nmetadata?: table\nstrict?: boolean\nStrictly match metadata or partial matching\nreturns: booleanCheck if inventory has item\n-- Player\nFramework.HasItem(source, 'water_bottle', 1)\n-- Stash\nFramework.HasItem('mystash', 'water_bottle', 1)\nCheck if inventory has item with metadata\n-- Player\nFramework.HasItem(source, 'water_bottle', 1, { quality = 100 })\n-- Stash\nFramework.HasItem('mystash', 'water_bottle', 1, { quality = 100 })\nCheck if inventory has multiple items\n-- Player\nFramework.HasItem(source, {'water_bottle', 'burger' }, 1)\n-- Stash\nFramework.HasItem('mystash', {'water_bottle', 'burger' }, 1)\nCheck if inventory has multiple with different quantity\n-- Player\nFramework.HasItem(source, {['water_bottle'] = 1, ['burger'] = 2})\n-- Stash\nFramework.HasItem('mystash', {['water_bottle'] = 1, ['burger'] = 2})","getitemmetadata#GetItemMetadata":"Get Item Metadata\nFramework.GetItemMetadata(inventory, slot)\ninventory: number | string\nslot: number\nreturns: table\n-- Player\nFramework.GetItemMetadata(source, 1)\n-- Stash\nFramework.GetItemMetadata('mystash', 1)","setitemmetadata#SetItemMetadata":"Set Item Metadata\nFramework.SetItemMetadata(inventory, slot, metadata)\ninventory: number | string\nslot: number\nmetadata: table\n-- Player\nFramework.SetItemMetadata(source, 1, { quality = 100 })\n-- Stash\nFramework.SetItemMetadata('mystash', 1, { quality = 100 })","getinventory#GetInventory":"Returns Inventory\nFramework.GetInventory(inventory)\ninventory: number | string\nreturns: Item[]\n-- Player\nFramework.GetInventory(source)\n-- Stash\nFramework.GetInventory('mystash')","clearinventory#ClearInventory":"Clear Inventory\nFramework.ClearInventory(inventory, keep)\ninventory: number | string\nkeep: string | string[]\n-- Player\nFramework.ClearInventory(source)\nFramework.ClearInventory(source, 'water_bottle')\nFramework.ClearInventory(source, { 'water_bottle', 'tosti' })\n-- Stash\nFramework.ClearInventory('mystash')\nFramework.ClearInventory('mystash', 'water_bottle')\nFramework.ClearInventory('mystash', { 'water_bottle', 'tosti' })","registerstash#RegisterStash":"Register Stash\nFramework.RegisterStash(name, slots, weight, owner, groups)\nname: string\nslots: number\nweight: number\nowner?: string | boolean\ngroups?: table\nRegister stash without owner or groups\nFramework.RegisterStash('mystash', 10, 5000)\nRegister stash unique to each player\nFramework.RegisterStash('mystash', 10, 5000, true)\nRegister stash with player as the owner\nFramework.RegisterStash('mystash', 10, 5000, 'ZWZ34061')\nRegister stash with groups\nFramework.RegisterStash('mystash', 10, 5000, nil, { ['police'] = 0, ['ambulance'] = 0 })\nFramework.RegisterStash('mystash', 10, 5000, nil, { ['mygang'] = 0 })","registershop#RegisterShop":"Register Shop\nWhen Using CodeM Inventory Shops Should Be Registered in codem-inventory/config/shops.lua With The Same Name\nFramework.RegisterShop(name, data)\nname: string\ndata: table\nname: string\nitems: table[]\nname: string\nprice: number\ncount?: number\nmetadata?: table\ngroups?: string | string[] | table<string, number>\nFramework.RegisterShop('myshop', {\n    name = 'My Shop',\n    items = {\n        { name = 'water_bottle', price = 10, count = 99, metadata = { quality = 50 }}\n    },\n    groups = {\n        police = 0,\n        mygang = 0\n    }\n})","confiscateinventory#ConfiscateInventory":"Clears a players inventory and saves it to return later\nFramework.ConfiscateInventory(source)\nsource: number","returninventory#ReturnInventory":"Returns players confiscated inventory\nFramework.ReturnInventory(source)\nsource: number"}},"/bridge/target":{"title":"Target","data":{"disabletarget#DisableTarget":"Disables target\nTarget.DisableTarget(state)\nstate : boolean","addglobalobject#AddGlobalObject":"Create Global Object Target\nTarget.AddGlobalObject(options)\noptions : Options[]","removeglobalobject#RemoveGlobalObject":"Remove Global Object Target\nTarget.RemoveGlobalObject(labels)\nlabels : string | string[]","addglobalped#AddGlobalPed":"Create Global Ped Target\nTarget.AddGlobalPed(options)\noptions : Options[]","removeglobalped#RemoveGlobalPed":"Remove Global Ped Target\nTarget.RemoveGlobalPed(labels)\nlabels : string | string[]","addglobalplayer#AddGlobalPlayer":"Create Global Player Target\nTarget.AddGlobalPlayer(options)\noptions : Options[]","removeglobalplayer#RemoveGlobalPlayer":"Remove Global Player Target\nTarget.RemoveGlobalPlayer(labels)\nlabels : string | string[]","addglobalvehicle#AddGlobalVehicle":"Create Global Vehicle Target\nTarget.AddGlobalVehicle(options)\noptions : Options[]","removeglobalvehicle#RemoveGlobalVehicle":"Remove Global Vehicle Target\nTarget.RemoveGlobalVehicle(labels)\nlabels : string | string[]","addmodel#AddModel":"Create Model Target\nTarget.AddModel(models, options)\nmodels : number | string | table<number | string>\noptions : Options[]","removemodel#RemoveModel":"Remove Model Target\nTarget.RemoveModel(models, labels)\nmodels : number | string | table<number | string>\nlabels : string | string[]","addentity#AddEntity":"Create Entity Target\nTarget.AddEntity(entities, options)\nentities : number | table\noptions : Options[]","removeentity#RemoveEntity":"Remove Entity Target\nTarget.RemoveEntity(entities, labels)\nentities : number | table\nlabels : string | string[]","addbone#AddBone":"Create Bone Target\nTarget.AddBone(bones, options)\nbones : string | table\noptions : Options[]","removebone#RemoveBone":"Remove Bone Target\nTarget.RemoveBone(bones, labels)\nbones : string | table\nlabels : string | string[]","removezone#RemoveZone":"Removes a target zone\nTarget.RemoveZone(id)\nid : number | string"}},"/bridge/target/boxzone":{"title":"Target BoxZone","data":{"":"Creates Targetable BoxZone.\nTarget.AddBoxZone(data)\ndata: table\ndebug?: boolean\nname: string\ncoords: vector3\nsize: vector3\nrotation: number\noptions: Options[]\nreturns: number | string\nTarget.AddBoxZone({\n    name = 'MyBoxZone',\n    coords = vector3(0, 0, 0),\n    size = vector3(1, 1, 1),\n    rotation = 0,\n    debug = true,\n    options = {}\n})"}},"/bridge/target/options":{"title":"Target Options","data":{"":"label string\nicon? string\ndistance? number\njob? string | string[] | table<string, number>\ngang? string | string[] | table<string, number>\nitems? string | string[] | table<string, number>\ncanInteract function(entity?: number): boolean?\nonSelect? function(data: table)\nexport? string\nevent? string\nserverEvent? string\ncommand? string"}},"/bridge/target/polyzone":{"title":"Target PolyZone","data":{"":"Creates Targetable PolyZone.\nTarget.AddPolyZone(data)\ndata: table\ndebug?: boolean\nname: string\nheight?: number\npoints: vector3[]\noptions: Options[]\nreturns: number | string\nTarget.AddPolyZone({\n    name = 'MyPolyZone',\n    points = {\n        vector3(0, 0, 0),\n        vector3(0, 0, 0),\n        vector3(0, 0, 0),\n        vector3(0, 0, 0)\n    },\n    height = 1,\n    debug = true,\n    options = {}\n})"}},"/bridge/target/spherezone":{"title":"Target SphereZone","data":{"":"Creates Targetable SphereZone.\nTarget.AddSphereZone(data)\ndata: table\ndebug?: boolean\nname: string\ncoords: vector3\nradius: number\noptions: Options[]\nreturns: number | string\nTarget.AddSphereZone({\n    name = 'MySphereZone',\n    coords = vector3(0, 0, 0),\n    radius = 1,\n    debug = true,\n    options = {}\n})"}},"/bridge/utilities/client":{"title":"Framework Utilities","data":{"loadmodel#LoadModel":"Load a model when called from a thread it will yield until loaded\nFramework.LoadModel(model) \nmodel: number | string","loadanimdict#LoadAnimDict":"Load a animation dictionary when called from a thread it will yield until loaded\nFramework.LoadAnimDict(animDict) \nanimDict: string","loadanimset#LoadAnimSet":"Load a animation clipset when called from a thread it will yield until loaded\nFramework.LoadAnimSet(animSet)\nanimSet: string","loadambientaudiobank#LoadAmbientAudioBank":"Load a ambient audio bank when called from a thread it will yield until loaded\nFramework.LoadAmbientAudioBank(bank)\nbank: string","loadmissionaudiobank#LoadMissionAudioBank":"Load a mission audio bank when called from a thread it will yield until loaded\nFramework.LoadMissionAudioBank(bank)\nbank: string","loadscriptaudiobank#LoadScriptAudioBank":"Load a script audio bank when called from a thread it will yield until loaded\nFramework.LoadScriptAudioBank(bank)\nbank: string","getpeds#GetPeds":"Get the Game Ped Pool\nFramework.GetPeds()\nreturns: [handlers: number]","getobjects#GetObjects":"Get the Game Object Pool\nFramework.GetObjects()\nreturns: [handlers: number]","getvehicles#GetVehicles":"Get the Game Vehicle Pool\nFramework.GetVehicles()\nreturns: [handlers: number]","getpickups#GetPickups":"Get the Game Pickup Pool\nFramework.GetPickups()\nreturns: [handlers: number]","getclosestped#GetClosestPed":"Get the ped and coords closest to set coords and distance\nFramework.GetClosestPed(coords, distance)\ncoords: vector3\ndistance?: number\nreturns:\nped?: number\ncoords?: vector3","getclosestplayer#GetClosestPlayer":"Get the player, ped and coords closest to set coords and distance\nFramework.GetClosestPlayer(coords, distance, includeLocal)\ncoords: vector3\ndistance?: number\nincludeLocal?: boolean\nreturns:\nplayer?: number\nped?: number\ncoords?: vector3","getclosestobject#GetClosestObject":"Get the object and coords closest to set coords and distance\nFramework.GetClosestObject(coords, distance)\ncoords: vector3\ndistance?: number\nreturns:\nobject?: number\ncoords?: vector3","getclosestvehicle#GetClosestVehicle":"Get the vehicle and coords closest to set coords and distance\nFramework.GetClosestVehicle(coords, distance, includeLocal)\ncoords: vector3\ndistance?: number\nincludeLocal?: boolean\nreturns:\nvehicle?: number\ncoords?: vector3","getclosestpickup#GetClosestPickup":"Get the pickup and coords closest to set coords and distance\nFramework.GetClosestPickup(coords, distance)\ncoords: vector3\ndistance?: number\nreturns:\npickup?: number\ncoords?: vector3","getnearbypeds#GetNearbyPeds":"Get all peds and coords in range of set coords and distance\nFramework.GetNearbyPeds(coords, distance)\ncoords: vector3\ndistance?: number\nreturns: { ped: number, coords: vector3 }[]","getnearbyplayers#GetNearbyPlayers":"Get all players, peds and coords in range of set coords and distance\nFramework.GetNearbyPlayers(coords, distance, includeLocal)\ncoords: vector3\ndistance?: number\nincludeLocal?: boolean\nreturns: { id: number, ped: number, coords: vector3 }[]","getnearbyobjects#GetNearbyObjects":"Get all objects and coords in range of set coords and distance\nFramework.GetNearbyObjects(coords, distance)\ncoords: vector3\ndistance?: number\nreturns: { object: number, coords: vector3 }[]","getnearbyvehicles#GetNearbyVehicles":"Get all vehicles and coords in range of set coords and distance\nFramework.GetNearbyVehicles(coords, distance, includeLocal)\ncoords: vector3\ndistance?: number\nincludeLocal?: boolean\nreturns: { vehicle: number, coords: vector3 }[]","getnearbypickups#GetNearbyPickups":"Get all pickups and coords in range of set coords and distance\nFramework.GetNearbyPickups(coords, distance)\ncoords: vector3\ndistance?: number\nreturns: { pickup: number, coords: vector3 }[]","progressbar#ProgressBar":"Displays a running progress bar\nFramework.ProgressBar(data)\ndata: table\nduration: number\nlabel: string\ncanCancel?: boolean\nuseWhileDead?: boolean\nanim?: table\ndict?: string\nclip?: string\nflag?: number\nscenario?: string\ndisable?: table\nmove?: boolean\nvehicle?: boolean\ncombat?: boolean\nmouse?: boolean\nprops?: (object or array)\nmodel: string\nbone?: number\npos: vector3\nrot: vector3\nonFinish?: function()\nonCancel?: function()","networkrequestcontrolofnetworkid#NetworkRequestControlOfNetworkId":"Not Recommended Unless You Absolutely Need It\nRequest network control of network id\nFramework.NetworkRequestControlOfNetworkId(netid) \nnetid: number","networkrequestcontrolofentity#NetworkRequestControlOfEntity":"Not Recommended Unless You Absolutely Need It\nRequest network control of entity\nFramework.NetworkRequestControlOfEntity(entity) \nentity: number","networkrequestcontrolofdoor#NetworkRequestControlOfDoor":"Not Recommended Unless You Absolutely Need It\nRequest network control of door\nFramework.NetworkRequestControlOfDoor(door) \ndoor: number"}},"/bridge/utilities/server":{"title":"Server","data":{}},"/bridge/utilities/shared":{"title":"Framework Utilities","data":{"round#Round":"Round Number To Decimal\nFramework.Round(value, decimals)\nvalue: number\ndecimals: numbers\nreturns: number","firsttoupper#FirstToUpper":"Set First Character to uppercase\nFramework.FirstToUpper(str)\nstr: string\nreturns: string"}},"/bridge/zone/boxzone":{"title":"Zone BoxZone","data":{"":"Creates BoxZone\nZone.BoxZone(data)\ndata: table\ndebug?: boolean\ncoords: vector3\nsize?: vector3\nDefault: vector3(4, 4, 4)\nrotation?: number\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\nreturns: CZone"}},"/bridge/zone/czone":{"title":"Zone CZone","data":{"id#id":"Zone Idreturns: number\nlocal myzone = Zone.PolyZone({ ... })\nmyzone.id","coords#coords":"Zone Coordsreturns: vector3\nlocal myzone = Zone.PolyZone({ ... })\nmyzone.coords()","distance#distance":"Zone Distancereturns: number\nlocal myzone = Zone.PolyZone({ ... })\n-- Updates depending on player position\nmyzone.distance()","remove#remove":"Remove the zone\nlocal myzone = Zone.PolyZone({ ... })\nmyzone.remove()","contains#contains":"Check if a vector3 is inside the zonereturns: boolean\nlocal myzone = Zone.PolyZone({ ... })\nmyzone.contains(vector3(0, 0, 0))","onenter#onEnter":"Called when the player enters the zone\nZone.PolyZone({\n    points = {\n        vec(413.8, -1026.1, 29),\n        vec(411.6, -1023.1, 29),\n        vec(412.2, -1018.0, 29),\n        vec(417.2, -1016.3, 29),\n        vec(422.3, -1020.0, 29),\n        vec(426.8, -1015.9, 29),\n        vec(431.8, -1013.0, 29),\n        vec(437.3, -1018.4, 29),\n        vec(432.4, -1027.2, 29),\n        vec(424.7, -1023.5, 29),\n        vec(420.0, -1030.2, 29),\n        vec(409.8, -1028.4, 29),\n    },\n    height = 2,\n    debug = true,\n    onEnter = function(data)\n        print('Player Just Entered Zone' .. data.id)\n    end\n})","onexit#onExit":"Called when the player leaves the zone\nZone.PolyZone({\n    points = {\n        vec(413.8, -1026.1, 29),\n        vec(411.6, -1023.1, 29),\n        vec(412.2, -1018.0, 29),\n        vec(417.2, -1016.3, 29),\n        vec(422.3, -1020.0, 29),\n        vec(426.8, -1015.9, 29),\n        vec(431.8, -1013.0, 29),\n        vec(437.3, -1018.4, 29),\n        vec(432.4, -1027.2, 29),\n        vec(424.7, -1023.5, 29),\n        vec(420.0, -1030.2, 29),\n        vec(409.8, -1028.4, 29),\n    },\n    height = 2,\n    debug = true,\n    onExit = function(data)\n        print('Player Just Left Zone ' .. data.id)\n    end\n})","inside#inside":"Called as long as the player is inside the zone\nZone.PolyZone({\n    points = {\n        vec(413.8, -1026.1, 29),\n        vec(411.6, -1023.1, 29),\n        vec(412.2, -1018.0, 29),\n        vec(417.2, -1016.3, 29),\n        vec(422.3, -1020.0, 29),\n        vec(426.8, -1015.9, 29),\n        vec(431.8, -1013.0, 29),\n        vec(437.3, -1018.4, 29),\n        vec(432.4, -1027.2, 29),\n        vec(424.7, -1023.5, 29),\n        vec(420.0, -1030.2, 29),\n        vec(409.8, -1028.4, 29),\n    },\n    height = 2,\n    debug = true,\n    inside = function(data)\n        print('Player Is Inside Zone ' .. data.id)\n    end\n})"}},"/bridge/zone/polyzone":{"title":"Zone PolyZone","data":{"":"Creates PolyZone\nZone.PolyZone(data)\ndata: table\ndebug?: boolean\nheight?: number\nDefault: 4\npoints: vector3[]\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\nreturns: CZone"}},"/bridge/zone/spherezone":{"title":"Zone SphereZone","data":{"":"Creates SphereZone.\nZone.SphereZone(data)\ndata: table\ndebug?: boolean\ncoords: vector3\nradius?: number\nDefault: 2\nonEnter: function(self: CZone)\nonExit: function(self: CZone)\ninside: function(self: CZone)\nreturns: CZone"}},"/":{"title":"Welcome","data":{"":"Welcome to the official documentation of reFlow Developer World, here you will find documentation for tools and products we develop"}},"/unit":{"title":"Unit","data":{}}}